echo https://networkhell.org/



# Detect OS
# $os_version variables aren't always in use, but are kept here for convenience
if grep -qs "ubuntu" /etc/os-release; then
	os="ubuntu"
	os_version=$(grep 'VERSION_ID' /etc/os-release | cut -d '"' -f 2 | tr -d '.')
	group_name="nogroup"
elif [[ -e /etc/debian_version ]]; then
	os="debian"
	os_version=$(grep -oE '[0-9]+' /etc/debian_version | head -1)
	group_name="nogroup"
elif [[ -e /etc/centos-release ]]; then
	os="centos"
	os_version=$(grep -oE '[0-9]+' /etc/centos-release | head -1)
	group_name="nobody"
elif [[ -e /etc/fedora-release ]]; then
	os="fedora"
	os_version=$(grep -oE '[0-9]+' /etc/fedora-release | head -1)
	group_name="nobody"
else
	echo "This installer seems to be running on an unsupported distribution.
Supported distributions are Ubuntu and Debian"
	exit
fi

if [[ "$os" == "ubuntu" && "$os_version" -lt 1804 ]]; then
	echo "Ubuntu 18.04 or higher is required to use this installer.
This version of Ubuntu is too old and unsupported."
	exit
fi

if [[ "$os" == "debian" && "$os_version" -lt 9 ]]; then
	echo "Debian 9 or higher is required to use this installer.
This version of Debian is too old and unsupported."
	exit
fi

# Detect environments where $PATH does not include the sbin directories
if ! grep -q sbin <<< "$PATH"; then
	echo '$PATH does not include sbin. Try using "su -" instead of "su".'
	exit
fi

if [[ "$EUID" -ne 0 ]]; then
	echo "This installer needs to be run with superuser privileges."
	exit
fi

if [[ ! -e /dev/net/tun ]] || ! ( exec 7<>/dev/net/tun ) 2>/dev/null; then
	echo "The system does not have the TUN device available.
TUN needs to be enabled before running this installer."
	exit
fi


sudo apt install ejabberd
sudo apt update

echo "###
###              ejabberd configuration file
###
### The parameters used in this configuration file are explained at
###
###       https://docs.ejabberd.im/admin/configuration
###
### The configuration file is written in YAML.
### *******************************************************
### *******           !!! WARNING !!!               *******
### *******     YAML IS INDENTATION SENSITIVE       *******
### ******* MAKE SURE YOU INDENT SECTIONS CORRECTLY *******
### *******************************************************
### Refer to http://en.wikipedia.org/wiki/YAML for the brief description.
###
#
---
## loglevel: Verbosity of log files generated by ejabberd
## 0: No ejabberd log at all (not recommended)
## 1: Critical
## 2: Error
## 3: Warning
## 4: Info
## 5: Debug
loglevel: 4

## rotation: Disable ejabberd's internal log rotation, as the Debian package
## uses logrotate(8).
log_rotate_count: 0
log_rotate_date: 

## hosts: Domains served by ejabberd.
## You can define one or several, for example:
## hosts:
##   - example.net
##   - example.com
##   - example.org

hosts:
  - localhost
  - your.domain.here
  - your.public.IP.here

certfiles:
  - /etc/ejabberd/ejabberd.pem
  - /etc/ssl/example.key
##  - /etc/letsencrypt/live/localhost/privkey.pem

## TLS configuration
define_macro:
  'TLS_CIPHERS': HIGH:!aNULL:!eNULL:!3DES:@STRENGTH
  'TLS_OPTIONS':
    - no_sslv3
    - no_tlsv1
    - no_tlsv1_1
    - cipher_server_preference
    - no_compression
    ## 'DH_FILE': /path/to/dhparams.pem
    ## generated with: openssl dhparam -out dhparams.pem 2048

c2s_ciphers: 'TLS_CIPHERS'
s2s_ciphers: 'TLS_CIPHERS'
c2s_protocol_options: 'TLS_OPTIONS'
s2s_protocol_options: 'TLS_OPTIONS'
## c2s_dhfile: 'DH_FILE'
## s2s_dhfile: 'DH_FILE'

listen:
  -
    port: 5222
    ip: Your-Public-IP-Here
    module: ejabberd_c2s
    max_stanza_size: 262144
    shaper: c2s_shaper
    access: c2s
    starttls_required: true
    protocol_options: 'TLS_OPTIONS'
  -
    port: 5223
    ip: Your-Public-IP-Here
    module: ejabberd_c2s
    max_stanza_size: 262144
    shaper: c2s_shaper
    access: c2s
    tls: true
    protocol_options: 'TLS_OPTIONS'
  -
    port: 5269
    ip: Your-Public-IP-Here
    module: ejabberd_s2s_in
    max_stanza_size: 524288
  -
    port: 5443
    ip: Your-Public-IP-Here
    module: ejabberd_http
    tls: true
    protocol_options: 'TLS_OPTIONS'
    request_handlers:
      /api: mod_http_api
      /bosh: mod_bosh
      ## /captcha: ejabberd_captcha
      ## /upload: mod_http_upload
      /ws: ejabberd_http_ws
  -
    port: 5280
    ip: Your-Public-IP-Here
    module: ejabberd_http
    tls: true
    protocol_options: 'TLS_OPTIONS'
    request_handlers:
      /admin: ejabberd_web_admin
      /.well-known/acme-challenge: ejabberd_acme
  -
    port: 1883
    ip: Your-Public-IP-Here
    module: mod_mqtt
    backlog: 1000

## Disabling digest-md5 SASL authentication. digest-md5 requires plain-text
## password storage (see auth_password_format option).
disable_sasl_mechanisms:
  - digest-md5
  - X-OAUTH2

s2s_use_starttls: required

## Store the plain passwords or hashed for SCRAM:
auth_password_format: scram

## Full path to a script that generates the image.
## captcha_cmd: /usr/share/ejabberd/captcha.sh

acl:
  admin:
     user:
       - bs@irc.networkhell.org

  local:
    user_regexp: 
  loopback:
    ip:
      - 127.0.0.0/8
      - ::1/128

access_rules:
  local:
    - allow: local
  c2s:
    - allow: all
  announce:
    - allow: admin
  configure:
    - allow: admin
  muc_create:
    - allow: all
  pubsub_createnode:
    - allow: all
  trusted_network:
    - allow: all

api_permissions:
  console commands:
    from:
      - ejabberd_ctl
    who: all
    what: *
  admin access:
    who:
      access:
        allow:
          acl: loopback
          acl: admin
      oauth:
        scope: ejabberd:admin
        access:
          allow:
            acl: loopback
            acl: admin
    what:
      - *
      - !stop
      - !start
  public commands:
    who:
      ip: 127.0.0.1/8
    what:
      - status
      - connected_users_number

shaper:
  normal: 1000
  fast: 50000

shaper_rules:
  max_user_sessions: 10
  max_user_offline_messages:
    5000: admin
    100: all
  c2s_shaper:
    none: admin
    normal: all
  s2s_shaper: fast

modules:
  mod_adhoc: {}
  mod_admin_extra: {}
  mod_announce:
    access: announce
  mod_avatar: {}
  mod_blocking: {}
  mod_bosh: {}
  mod_caps: {}
  mod_carboncopy: {}
  mod_client_state: {}
  mod_configure: {}
  ## mod_delegation: {}   # for xep0356
  mod_disco: {}
  mod_echo: {}
  mod_fail2ban: {}
  mod_http_api: {}
  ## mod_http_upload:
  ##   put_url: https://@HOST@:5443/upload
  mod_last: {}
  ## mod_mam:
  ##   ## Mnesia is limited to 2GB, better to use an SQL backend
  ##   ## For small servers SQLite is a good fit and is very easy
  ##   ## to configure. Uncomment this when you have SQL configured:
  ##   ## db_type: sql
  ##   assume_mam_usage: true
  ##   default: always
  mod_mqtt: {}
  mod_muc:
    access:
      - allow
    access_admin:
      - allow: admin
    access_create: muc_create
    access_persistent: muc_create
    access_mam:
      - allow
    default_room_options:
      mam: true
  mod_muc_admin: {}
  mod_offline:
    access_max_user_messages: max_user_offline_messages
  mod_ping: {}
  mod_pres_counter:
    count: 5
    interval: 60
  mod_privacy: {}
  mod_private: {}
  ## mod_proxy65:
  ##   access: local
  ##   max_connections: 5
  mod_pubsub:
    access_createnode: pubsub_createnode
    plugins:
      - flat
      - pep
    force_node_config:
      eu.siacs.conversations.axolotl.*:
        access_model: open
      ## Avoid buggy clients to make their bookmarks public
      storage:bookmarks:
        access_model: whitelist
  mod_push: {}
  mod_push_keepalive: {}
  ## mod_register:
  ##   ## Only accept registration requests from the trusted
  ##   ## network (see access_rules section above).
  ##   ## Think twice before enabling registration from any
  ##   ## address. See the Jabber SPAM Manifesto for details:
  ##   ## https://github.com/ge0rg/jabber-spam-fighting-manifesto
  ##   ip_access: trusted_network
  mod_roster:
    versioning: true
  mod_s2s_dialback: {}
  mod_shared_roster: {}
  mod_sic: {}
  mod_stream_mgmt:
    resend_on_timeout: if_offline
  mod_vcard:
    search: false
  mod_vcard_xupdate: {}
  mod_version: {}
  
### Local Variables:
### mode: yaml
### End:
### vim: set filetype=yaml tabstop=8" > /etc/ejabberd/ejabberd.yml

ejabberdctl restart
echo done!
echo now installing certbot and apache2.

sudo apt install apache2

sudo apt-get install software-properties-common
sudo add-apt-repository universe
sudo add-apt-repository ppa:certbot/certbot
sudo apt-get update
sudo apt-get install certbot python-certbot-apache apache2

sudo certbot --apache

echo now you need to manually point your 
echo letsencrypt cert at your ejabberd cert
echo "........................"

echo copy and paste examples below, replace example.com with your domain name,
echo "cat >> /etc/letsencrypt/live/example.com/cert.pem /etc/ejabberd/ejabberd.pem"
echo "cat >> /etc/letsencrypt/live/example.com/chain.pem /etc/ejabberd/ejabberd.pem"
echo "cat >> /etc/letsencrypt/live/example.com/fullchain.pem /etc/ejabberd/ejabberd.pem" 
echo "cat >> /etc/letsencrypt/live/example.com/privkey.pem /etc/ejabberd/ejabberd.pem"

echo "........................"

echo Copy and paste these lines. just make sure you replace example.com with your domain!
echo Make sure to change the "hostname" section in "/etc/ejabberd.ejabberd.yml"
echo to your domain!!
echo ..........
echo "lines you need to edit in ejabberd.yml:
your hosts starting at line 39
your .key path at line 46
your IP on line;
71
80
89
94
106
115
your admin user at line 136
to enable MUC support set an a-record pointing 'conference' at your servers IP
in your domains DNS Settings!
thats it. now run ejabberdctl restart"
